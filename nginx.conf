# /nginx.conf
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Set internal resolver (optional but can be helpful)
    resolver 127.0.0.11 8.8.8.8 valid=30s;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    # Use stderr for error logs to easily see them in Railway logs
    error_log /dev/stderr warn;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    server {
        # Listen on the port specified by Railway ($PORT) on both IPv4 and IPv6
        # Railway forwards external port 443 (HTTPS) traffic to this internal port (HTTP)
        listen 80;          # Hardcoded IPv4
        listen [::]:80;     # Hardcoded IPv6
        server_name _; # Catch-all

        location / {
            # Define the internal upstream using Railway's service discovery DNS.
            set $upstream_ipfs http://jupyter-ipfs:4001; # Service name defined in railway.json

            proxy_pass $upstream_ipfs;

            # Required headers for WebSocket proxying
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Forward client information
            proxy_set_header Host $host; # Forward the original Host header
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # e.g., 'https'

            # Set longer timeouts for potentially long-lived WS connections
            proxy_connect_timeout 7d;
            proxy_send_timeout    7d;
            proxy_read_timeout    7d;
        }
    }
}