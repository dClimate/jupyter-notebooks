# Dockerfile.jupyter
FROM --platform=linux/amd64 python:3.12.7-slim

# Install system dependencies, IPFS, and build tools
# build-essential: Provides GCC compiler and build tools for C extensions
# python3-dev: Includes Python headers needed for building C extensions
# libffi-dev: Required for Foreign Function Interface
# libssl-dev: Needed for cryptographic operations
RUN apt-get update && apt-get install -y \
    git \
    curl \
    wget \
    build-essential \
    python3-dev \
    python3-venv \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

ARG KUBO_VERSION=0.33.2

# Install IPFS with architecture detection
RUN arch=$(uname -m) && \
    if [ "$arch" = "aarch64" ]; then \
    IPFS_ARCH="arm64"; \
    else \
    IPFS_ARCH="amd64"; \
    fi && \
    wget "https://dist.ipfs.tech/kubo/v${KUBO_VERSION}/kubo_v${KUBO_VERSION}_linux-${IPFS_ARCH}.tar.gz" && \
    tar -xvzf "kubo_v${KUBO_VERSION}_linux-${IPFS_ARCH}.tar.gz" && \
    cd kubo && \
    bash install.sh && \
    cd .. && \
    rm -rf "kubo_v${KUBO_VERSION}_linux-${IPFS_ARCH}.tar.gz"

# <----------------- UV installation ----------------->
# The installer requires curl (and certificates) to download the release archive
RUN apt-get update && apt-get install -y --no-install-recommends curl ca-certificates

# Download the latest installer
ADD https://astral.sh/uv/install.sh /uv-installer.sh

# Run the installer then remove it
RUN sh /uv-installer.sh && rm /uv-installer.sh

# Ensure the installed binary is on the `PATH`
ENV PATH="/root/.local/bin/:$PATH"

# <----------------- End of UV installation ----------------->

# Create a directory for UV virtual environment
# We use UV's native virtual environment instead of venv
ENV VIRTUAL_ENV=/opt/venv
RUN uv venv $VIRTUAL_ENV

# Add virtual environment to PATH
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Install base packages using UV
COPY requirements.txt .
RUN uv pip install --no-cache -r requirements.txt

# Create requirements directory
RUN mkdir -p /opt/requirements


# Initialize IPFS with default settings and enable AutoTLS
RUN ipfs init

# # Initialize IPFS with default settings and enable AutoTLS
# RUN ipfs init && \
#     ipfs config --json AutoTLS '{"Enabled": true, "AutoWSS": true}'

# Set up working directory
WORKDIR /notebooks

# Copy notebooks directly from the build context for railway (?? This isn't needed for codespaces or local builds)
COPY notebooks/* /notebooks/

# Expose ports for Jupyter and IPFS
# Jupyter
EXPOSE 8888 
# IPFS swarm
EXPOSE 4001  
# IPFS API
EXPOSE 5001  
# IPFS Gateway
EXPOSE 8080 

# Copy and set up scripts
COPY scripts/start.sh /scripts/start.sh
COPY scripts/install_packages.sh /scripts/install_packages.sh
RUN chmod +x /scripts/start.sh /scripts/install_packages.sh


# Install Node.js and npm (using Debian packages available in slim images)
RUN apt-get update && apt-get install -y nodejs npm

# Create a directory for our Node.js echo server
WORKDIR /echo-server

# Copy the echo server file into the container
COPY echo-server.js .

COPY cert.pem key.pem /echo-server/

# Initialize a package.json and install the ws package
RUN npm init -y && npm install ws

CMD ["/scripts/start.sh"]